import { EnvironmentBuilderSchema } from './schema';
import { Builder, BuilderConfiguration, BuilderContext, BuildEvent } from '@angular-devkit/architect';
import { bindNodeCallback, Observable, Subject } from 'rxjs';
import { writeFile } from 'fs';
import { map, tap } from 'rxjs/operators';

// noinspection JSUnusedGlobalSymbols
export default class EnvironmentBuilder implements Builder<EnvironmentBuilderSchema> {

    constructor(private context: BuilderContext) {
    }

    run(builderConfig: BuilderConfiguration<Partial<EnvironmentBuilderSchema>>): Observable<BuildEvent> {
        const response = new Subject<BuildEvent>();
        const root = this.context.workspace.root;
        const { model, modelPath, filename, path } = builderConfig.options;

        const stringifyOptions = {
            space: 4,
            quote: '\'',
        };

        const envConfigFile = `\
/** DO NOT EDIT THIS FILE! **/

/** This file is auto generated by the builder and should not be touched since this will be overwritten upon rebuilding. **/
import { ${model} } from '${modelPath}';

export const environment: ${model} = {};
`;
        const fullPath = path + filename;
        const writeFile$ = bindNodeCallback(writeFile);
        return writeFile$(fullPath, envConfigFile).pipe(
            tap(() => console.log(`Output generated at ${fullPath}`)),
            map(() => ({ success: true })),
        );
    }

}